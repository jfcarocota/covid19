{"version":3,"sources":["components/Map.js","App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","Map","props","mapboxElRef","createRef","state","lng","lat","zoom","map","container","this","mapContainer","style","center","fetch","then","r","json","data","points","point","index","stats","coordinates","province","country","latitude","type","geometry","longitude","properties","id","cases","confirmed","deaths","once","addSource","features","addLayer","source","paint","className","ref","e","Component","App","url","context","arr","canvas","React","res","setState","Mexico","length","getContext","date","recovered","arr_cofirmed","arr_dates","arr_deaths","arr_recovereds","Chart","labels","datasets","label","fill","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","c","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7de933c4.chunk.js","sourcesContent":["import React, {Component, useRef, createRef} from 'react';\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport useSWR from \"swr\"; // React hook to fetch the data\r\nimport lookup from \"country-code-lookup\"; // npm module to get ISO Code for countries\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport './map.scss'\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiamZjYXJvY290YSIsImEiOiJjazhzYnV2Z3YwNWVnM2xtdGIwOWs4bTl3In0.FdaOCRNbW03t4j1PaJyqIg';\r\n\r\nexport default class Map extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.mapboxElRef = createRef();\r\n\r\n        this.state = {\r\n            lng: -102.10232,\r\n            lat: 23.68367,\r\n            zoom: 3.60,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const url = 'https://corona.lmao.ninja/v2/jhucsse';\r\n\r\n        const map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n        });\r\n\r\n        fetch(url).then(r => r.json()).then(data => {\r\n            \r\n            const points = data.map((point, index) =>{\r\n                //console.log(country);\r\n                const {stats, coordinates, province, country} = point;\r\n                const {latitude, longitude} = coordinates;\r\n                const {confirmed, deaths} = stats;\r\n                return {\r\n                    type: \"Feature\",\r\n                    geometry: {\r\n                        type: \"Point\",\r\n                        coordinates: [\r\n                            longitude,\r\n                            latitude\r\n                        ]\r\n                    },\r\n                    properties: {\r\n                        id: index, // unique identifier in this case the index\r\n                        country: country,\r\n                        province: province,\r\n                        cases: confirmed,\r\n                        deaths: deaths\r\n                    }\r\n                } \r\n            });\r\n\r\n            map.once('load', ()=>{\r\n                map.addSource(\"points\", {\r\n                    type: \"geojson\",\r\n                    data: {\r\n                      type: \"FeatureCollection\",\r\n                      features: points\r\n                    }\r\n                });\r\n\r\n                map.addLayer({\r\n                    id: \"circles\",\r\n                    source: \"points\", // this should be the id of the source\r\n                    type: \"circle\",\r\n                    // paint properties\r\n                    paint: {\r\n                        \"circle-opacity\": 0.75,\r\n                        \"circle-stroke-width\": 1,\r\n                        \"circle-radius\": 4,\r\n                        \"circle-color\": \"#FFEB3B\",\r\n                        \"circle-radius\": [\r\n                            \"interpolate\",\r\n                            [\"linear\"],\r\n                            [\"get\", \"cases\"],\r\n                            1, 4,\r\n                            1000, 8,\r\n                            4000, 10,\r\n                            8000, 14,\r\n                            12000, 18,\r\n                            100000, 40\r\n                        ]\r\n                    }\r\n                });\r\n            });\r\n\r\n            //console.log(points);\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n             <div className=\"mapContainer\">\r\n                <div className=\"mapBox\" ref={e => this.mapContainer  = e} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component, Fragment} from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Chart from 'chart.js';\r\nimport Map from './components/Map';\r\n\r\nexport default class App extends Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      url: 'https://pomber.github.io/covid19/timeseries.json',\r\n      data: {},\r\n      context: '',\r\n      arr: []\r\n    }\r\n    this.canvas = React.createRef();\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {url} = this.state;\r\n    fetch(url).then(res => res.json()).then(json => this.setState({\r\n      data: json.Mexico[json.Mexico.length - 1],\r\n      arr: json.Mexico\r\n    }));\r\n    this.setState({context: this.canvas.getContext('2d')});\r\n  }\r\n\r\n  render() {\r\n    const {data, arr} = this.state;\r\n    const {date, confirmed, deaths, recovered} = data;\r\n    //console.log(this.state);\r\n\r\n    const arr_cofirmed = arr.map(e =>{\r\n      return e.confirmed;\r\n    });\r\n\r\n    const arr_dates = arr.map(e =>{\r\n      return e.date;\r\n    });\r\n\r\n    const arr_deaths = arr.map(e =>{\r\n      return e.deaths;\r\n    });\r\n\r\n    const arr_recovereds = arr.map(e =>{\r\n      return e.recovered;\r\n    });\r\n    \r\n\r\n\r\n    const myChart = new Chart(this.state.context, {\r\n      type: 'line',\r\n      data: {\r\n          labels: arr_dates,\r\n          datasets: [{\r\n              label: 'Casos confirmados (hasta el día de hoy)',\r\n              fill: false,\r\n              data: arr_cofirmed,\r\n              backgroundColor: 'rgba(0, 0, 255, 1)',\r\n              borderColor: 'rgba(0, 0, 255, 255)',\r\n              borderWidth: 2\r\n          },\r\n          {\r\n            label: 'Fallecimientos (hasta el día de hoy)',\r\n            fill: false,\r\n            data: arr_deaths,\r\n            backgroundColor: 'rgba(255, 0, 0, 1)',\r\n            borderColor: 'rgba(255, 0, 0, 255)',\r\n            borderWidth: 2\r\n        },\r\n        {\r\n          label: 'Pacientes recuperados (hasta el día de hoy)',\r\n          fill: false,\r\n          data: arr_recovereds,\r\n          backgroundColor: 'rgba(0, 255, 0, 1)',\r\n          borderColor: 'rgba(0, 255, 0, 255)',\r\n          borderWidth: 2\r\n      }]\r\n      },\r\n      options: {\r\n          scales: {\r\n              yAxes: [{\r\n                  ticks: {\r\n                      beginAtZero: true\r\n                  }\r\n              }]\r\n          }\r\n      }\r\n  });\r\n\r\n    return (\r\n       <Fragment>\r\n\r\n          <div className=\"container\">\r\n          <h1>Covid19 México</h1>\r\n          <div className=\"row\">\r\n            \r\n              <div className=\"col text-center\">\r\n                <div className=\"display-1\">{date}</div>\r\n                <div className=\"text-secondary\"><strong>Fecha del último reporte</strong></div>\r\n                <div className=\"display-1\">{confirmed}</div>\r\n                <div className=\"text-secondary\"><strong>Casos confirmados</strong></div>\r\n                <div className=\"display-1\">{deaths}</div>\r\n                <div className=\"text-secondary\"><strong>Fallecimientos</strong></div>\r\n                <div className=\"display-1\">{recovered}</div>\r\n                <div className=\"text-secondary\"><strong>Pacientes recuperados</strong></div>\r\n                <br/>\r\n                <canvas id=\"myChart\" ref={c => this.canvas = c} width=\"400\" height=\"400\"></canvas>\r\n                <br/>\r\n                <h1>Covid19 en el mundo</h1>\r\n                <Map/>\r\n                <br/>\r\n                <footer>Datos tomados de \"The Center for Systems Science and Engineering (CSSE) at JHU\", public api: https://github.com/pomber/covid19</footer>\r\n              </div>\r\n            </div>\r\n  \r\n          </div>\r\n       </Fragment>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}