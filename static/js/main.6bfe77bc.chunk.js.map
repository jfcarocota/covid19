{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","url","data","context","arr","canvas","React","createRef","this","fetch","then","res","json","setState","Mexico","length","getContext","date","confirmed","deaths","recovered","console","log","arr_cofirmed","map","e","arr_dates","arr_deaths","arr_recovereds","Chart","type","labels","datasets","label","fill","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","className","id","ref","c","width","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0PAKqBA,E,kDAEnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACXC,IAAK,mDACLC,KAAM,GACNC,QAAS,GACTC,IAAK,IAEP,EAAKC,OAASC,IAAMC,YATJ,E,gEAaG,IAAD,OACXN,EAAOO,KAAKR,MAAZC,IACPQ,MAAMR,GAAKS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAAI,OAAI,EAAKC,SAAS,CAC5DX,KAAMU,EAAKE,OAAOF,EAAKE,OAAOC,OAAS,GACvCX,IAAKQ,EAAKE,YAEZN,KAAKK,SAAS,CAACV,QAASK,KAAKH,OAAOW,WAAW,U,+BAGvC,IAAD,SACaR,KAAKR,MAAlBE,EADA,EACAA,KAAME,EADN,EACMA,IACNa,EAAsCf,EAAtCe,KAAMC,EAAgChB,EAAhCgB,UAAWC,EAAqBjB,EAArBiB,OAAQC,EAAalB,EAAbkB,UAChCC,QAAQC,IAAId,KAAKR,OAEjB,IAAMuB,EAAenB,EAAIoB,KAAI,SAAAC,GAC3B,OAAOA,EAAEP,aAGLQ,EAAYtB,EAAIoB,KAAI,SAAAC,GACxB,OAAOA,EAAER,QAGLU,EAAavB,EAAIoB,KAAI,SAAAC,GACzB,OAAOA,EAAEN,UAGLS,EAAiBxB,EAAIoB,KAAI,SAAAC,GAC7B,OAAOA,EAAEL,aAKK,IAAIS,IAAMrB,KAAKR,MAAMG,QAAS,CAC5C2B,KAAM,OACN5B,KAAM,CACF6B,OAAQL,EACRM,SAAU,CAAC,CACPC,MAAO,6CACPC,MAAM,EACNhC,KAAMqB,EACNY,gBAAiB,qBACjBC,YAAa,uBACbC,YAAa,GAEjB,CACEJ,MAAO,0CACPC,MAAM,EACNhC,KAAMyB,EACNQ,gBAAiB,qBACjBC,YAAa,uBACbC,YAAa,GAEjB,CACEJ,MAAO,iDACPC,MAAM,EACNhC,KAAM0B,EACNO,gBAAiB,qBACjBC,YAAa,uBACbC,YAAa,KAGjBC,QAAS,CACLC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,SAO/B,OACG,kBAAC,WAAD,KAEG,yBAAKC,UAAU,aACf,iDACA,yBAAKA,UAAU,OAEX,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,aAAa1B,GAC5B,yBAAK0B,UAAU,kBAAiB,gEAChC,yBAAKA,UAAU,aAAazB,GAC5B,yBAAKyB,UAAU,kBAAiB,sDAChC,yBAAKA,UAAU,aAAaxB,GAC5B,yBAAKwB,UAAU,kBAAiB,mDAChC,yBAAKA,UAAU,aAAavB,GAC5B,yBAAKuB,UAAU,kBAAiB,0DAChC,6BACA,4BAAQC,GAAG,UAAUC,IAAK,SAAAC,GAAC,OAAI,EAAKzC,OAASyC,GAAGC,MAAM,MAAMC,OAAO,QACnE,6BACA,0K,GA1GiBC,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.6bfe77bc.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Chart from 'chart.js';\n\nexport default class App extends Component{\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      url: 'https://pomber.github.io/covid19/timeseries.json',\n      data: {},\n      context: '',\n      arr: []\n    }\n    this.canvas = React.createRef();\n\n  }\n\n  componentDidMount() {\n    const {url} = this.state;\n    fetch(url).then(res => res.json()).then(json => this.setState({\n      data: json.Mexico[json.Mexico.length - 1],\n      arr: json.Mexico\n    }));\n    this.setState({context: this.canvas.getContext('2d')});\n  }\n\n  render() {\n    const {data, arr} = this.state;\n    const {date, confirmed, deaths, recovered} = data;\n    console.log(this.state);\n\n    const arr_cofirmed = arr.map(e =>{\n      return e.confirmed;\n    });\n\n    const arr_dates = arr.map(e =>{\n      return e.date;\n    });\n\n    const arr_deaths = arr.map(e =>{\n      return e.deaths;\n    });\n\n    const arr_recovereds = arr.map(e =>{\n      return e.recovered;\n    });\n    \n\n\n    const myChart = new Chart(this.state.context, {\n      type: 'line',\n      data: {\n          labels: arr_dates,\n          datasets: [{\n              label: 'Casos confirmados (hasta el día de hoy)',\n              fill: false,\n              data: arr_cofirmed,\n              backgroundColor: 'rgba(0, 0, 255, 1)',\n              borderColor: 'rgba(0, 0, 255, 255)',\n              borderWidth: 2\n          },\n          {\n            label: 'Fallecimientos (hasta el día de hoy)',\n            fill: false,\n            data: arr_deaths,\n            backgroundColor: 'rgba(255, 0, 0, 1)',\n            borderColor: 'rgba(255, 0, 0, 255)',\n            borderWidth: 2\n        },\n        {\n          label: 'Pacientes recuperados (hasta el día de hoy)',\n          fill: false,\n          data: arr_recovereds,\n          backgroundColor: 'rgba(0, 255, 0, 1)',\n          borderColor: 'rgba(0, 255, 0, 255)',\n          borderWidth: 2\n      }]\n      },\n      options: {\n          scales: {\n              yAxes: [{\n                  ticks: {\n                      beginAtZero: true\n                  }\n              }]\n          }\n      }\n  });\n\n    return (\n       <Fragment>\n\n          <div className=\"container\">\n          <h1>Covid19 México</h1>\n          <div className=\"row\">\n            \n              <div className=\"col text-center\">\n                <div className=\"display-1\">{date}</div>\n                <div className=\"text-secondary\"><strong>Fecha del último reporte</strong></div>\n                <div className=\"display-1\">{confirmed}</div>\n                <div className=\"text-secondary\"><strong>Casos confirmados</strong></div>\n                <div className=\"display-1\">{deaths}</div>\n                <div className=\"text-secondary\"><strong>Fallecimientos</strong></div>\n                <div className=\"display-1\">{recovered}</div>\n                <div className=\"text-secondary\"><strong>Pacientes recuperados</strong></div>\n                <br/>\n                <canvas id=\"myChart\" ref={c => this.canvas = c} width=\"400\" height=\"400\"></canvas>\n                <br/>\n                <footer>Datos tomados de \"The Center for Systems Science and Engineering (CSSE) at JHU\", public api: https://github.com/pomber/covid19</footer>\n              </div>\n            </div>\n  \n          </div>\n       </Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}